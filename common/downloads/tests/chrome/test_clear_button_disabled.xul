<?xml version="1.0"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 *   the Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Anoop Saldanha <poonaatsoc@gmail.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/**
 * This tests 437422.  This test basically intends to checks if the clear list
 * button is disabled when:
 * 1.  an invalid search string has been entered into the search box.
 * 2.  active downloads are present in the dm ui
 * 3.  we have both case (1) and (2)
 */
-->

<window title="Download Manager Test"
        onload="runTest();"
        xmlns:html="http://www.w3.org/1999/xhtml"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="application/javascript"
          src="chrome://mochikit/content/MochiKit/packed.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>

  <script type="application/javascript">

  <![CDATA[

const nsIDownloadManager = Components.interfaces.nsIDownloadManager;
var ios = Components.classes["@mozilla.org/network/io-service;1"]
                    .getService(Components.interfaces.nsIIOService);
var dmFile = Components.classes["@mozilla.org/file/directory_service;1"]
                       .getService(Components.interfaces.nsIProperties)
                       .get("TmpD", Components.interfaces.nsIFile);
dmFile.append("dm-ui-test.file");
dmFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 0666);
var gTestPath = ios.newFileURI(dmFile).spec;

const DoneDownloadData = [
  { name: "Dead",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859239,
    state: nsIDownloadManager.DOWNLOAD_CANCELED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 }
];

const ActiveDownloadData = [
  { name: "Patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859239,
    state: nsIDownloadManager.DOWNLOAD_DOWNLOADING,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 }
];

function runTest()
{
  var dm = Components.classes["@mozilla.org/download-manager;1"]
                     .getService(Components.interfaces.nsIDownloadManager);
  var db = dm.DBConnection;

  // Empty any old downloads
  db.executeSimpleSQL("DELETE FROM moz_downloads");

  var stmt = db.createStatement(
    "INSERT INTO moz_downloads (name, source, target, startTime, endTime, " +
      "state, currBytes, maxBytes, preferredAction, autoResume) " +
    "VALUES (:name, :source, :target, :startTime, :endTime, :state, " +
      ":currBytes, :maxBytes, :preferredAction, :autoResume)");
  for each (var dl in DoneDownloadData) {
    for (var prop in dl)
      stmt.params[prop] = dl[prop];

    stmt.execute();
  }
  //stmt.finalize();

  // Close the UI if necessary
  var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
                     .getService(Components.interfaces.nsIWindowMediator);
  var win = wm.getMostRecentWindow("Download:Manager");
  if (win) win.close();

  var obs = Components.classes["@mozilla.org/observer-service;1"]
                      .getService(Components.interfaces.nsIObserverService);
  const DLMGR_UI_DONE = "download-manager-ui-done";

  var testPhase = 0;
  var testObs = {
    observe: function(aSubject, aTopic, aData) {
      var doc = aSubject.document;
      var searchbox = doc.getElementById("search-box");
      var clearButton = doc.getElementById("clearListButton");

      switch (testPhase++) {
        case 0:
          // Ensure that the clear list button is enabled at first
          ok(!clearButton.disabled,
             "The clear list button is  not disabled initially.");

          // Now, insert an nonsensical search string - nothing should show up,
          // and the button should be disabled in the next test phase
          searchbox.value = "Nonsensical";
          searchbox.doCommand();

          break;
        case 1:
          ok(clearButton.disabled,
             "The clear list button is disabled with a nonsensical search " +
             "term entered");

          // Clear the search box
          searchbox.value = "";
          searchbox.doCommand();
          break;

        case 2:
          // Populate the download manager with an active download now, and
          // rebuild the list
          stmt.reset();
          for each (var dl in ActiveDownloadData) {
            for (var prop in dl)
              stmt.params[prop] = dl[prop];

            stmt.execute();
          }
          stmt.finalize();
          dm.cleanUp();

          break;
        case 3:
          ok(clearButton.disabled,
             "The clear list button is disabled when we only have an active " +
             "download");

          // Now, insert an nonsensical search string - only the active download
          // should show up, and the button should be disabled in the next test
          // phase
          searchbox.value = "Nonsensical";
          searchbox.doCommand();
          break;
        case 4:
          ok(clearButton.disabled,
             "The clear list button is disabled with a nonsensical search " +
             "term entered and one active download");

          obs.removeObserver(testObs, DLMGR_UI_DONE);
          db.executeSimpleSQL("DELETE FROM moz_downloads");
          SimpleTest.finish();

          break;
      }
    }
  };

  obs.addObserver(testObs, DLMGR_UI_DONE, false);

  Components.classes["@mozilla.org/download-manager-ui;1"]
            .getService(Components.interfaces.nsISuiteDownloadManagerUI)
            .showManager();

  SimpleTest.waitForExplicitFinish();
}

  ]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display: none"></div>
    <pre id="test"></pre>
  </body>
</window>
