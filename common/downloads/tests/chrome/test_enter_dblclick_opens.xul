<?xml version="1.0"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Download Manager UI Test Code.
 *
 * The Initial Developer of the Original Code is
 * Edward Lee <edward.lee@engineering.uiuc.edu>.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Jens Hatlak <jh@junetz.de> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/**
 * Test bug 495545 (implemented by bug 474622) to make sure the enter key
 * or a double click actually calls opening the downloaded file.
 */
-->

<window title="Download Manager Test"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="test();">

  <script type="application/javascript"
          src="chrome://mochikit/content/MochiKit/packed.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"/>

  <script type="application/javascript">
  <![CDATA[

// similar, but not equal to the one in tree_shared.js
function mouseDblClickOnCell(aTree, aRow, aColumn, aWin)
{
  // get cell coordinates
  if (typeof aTree.columns != "undefined")
    aColumn = aTree.columns[aColumn];
  var rect = aTree.treeBoxObject.getCoordsForCellItem(aRow, aColumn, "text");
  synthesizeMouse(aTree.body, rect.x, rect.y, { clickCount: 2 }, aWin);
}

function dlObs(aWin)
{
  this.mWin = aWin;
  this.currDownload = null;
}
dlObs.prototype = {
  observe: function(aSubject, aTopic, aData)
  {
    if ("timer-callback" == aTopic) {
      var downloadTree = this.mWin.document.getElementById("downloadTree");
      var downloadView = downloadTree.view;

      // Default test/check for invocations
      var invokeCount = 0;
      var counter = () => invokeCount++;

      // Run tests

      // Make a copy of the openDownload function and replace it with a test
      let copy;
      [copy, this.mWin["openDownload"]] = [this.mWin["openDownload"], counter];

      // Select the first (paused) download for not calling openDownload
      downloadView.selection.select(0);

      synthesizeKey("VK_RETURN", {}, this.mWin);
      is(invokeCount, 0, "Enter didn't do anything");

      mouseDblClickOnCell(downloadTree, 0, 3, this.mWin);
      is(invokeCount, 0, "Double click didn't do anything");

      // Select the second (finished) download for calling openDownload
      downloadView.selection.select(1);

      synthesizeKey("VK_RETURN", {}, this.mWin);
      is(invokeCount, 1, "Enter opened download");

      mouseDblClickOnCell(downloadTree, 1, 3, this.mWin);
      is(invokeCount, 2, "Double click opened download");

      // After all tests, restore original function
      this.mWin["openDownload"] = copy;

      // We're done!
      this.mWin.close();
      this.currDownload.targetFile.remove(false);
      SimpleTest.finish();
    }
  },

  onDownloadStateChange: function(aState, aDownload)
  {
    if (aDownload.state == Components.interfaces.nsIDownloadManager.DOWNLOAD_FINISHED) {
      this.currDownload = aDownload;
      // We have to do this on a timer so other JS stuff that handles the UI
      // can actually catch up to us...
      var timer = Components.classes["@mozilla.org/timer;1"]
                            .createInstance(Components.interfaces.nsITimer);
      timer.init(this, 0, Components.interfaces.nsITimer.TYPE_ONE_SHOT);

      var dm = Components.classes["@mozilla.org/download-manager;1"]
                         .getService(Components.interfaces.nsIDownloadManager);
      dm.removeListener(this);
    }
  },
  onStateChange: function(a, b, c, d, e) { },
  onProgressChange: function(a, b, c, d, e, f, g) { },
  onSecurityChange: function(a, b, c, d) { }
};

function test()
{
  var dm = Components.classes["@mozilla.org/download-manager;1"]
                     .getService(Components.interfaces.nsIDownloadManager);

  function addDownload() {
    function createURI(aObj) {
      var ios = Components.classes["@mozilla.org/network/io-service;1"]
                          .getService(Components.interfaces.nsIIOService);
      return (aObj instanceof Components.interfaces.nsIFile) ? ios.newFileURI(aObj) :
                                            ios.newURI(aObj, null, null);
    }

    const nsIWBP = Components.interfaces.nsIWebBrowserPersist;
    var persist = Components.classes["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
                            .createInstance(nsIWBP);
    persist.persistFlags = nsIWBP.PERSIST_FLAGS_REPLACE_EXISTING_FILES |
                           nsIWBP.PERSIST_FLAGS_BYPASS_CACHE |
                           nsIWBP.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;

    var dirSvc = Components.classes["@mozilla.org/file/directory_service;1"]
                           .getService(Components.interfaces.nsIProperties);
    var destFile = dirSvc.get("ProfD", Components.interfaces.nsIFile);
    destFile.append("download.result");
    if (destFile.exists())
      destFile.remove(false);

    var dl = dm.addDownload(Components.interfaces.nsIDownloadManager.DOWNLOAD_TYPE_DOWNLOAD,
                            createURI("http://example.com/httpd.js"),
                            createURI(destFile), null, null,
                            Math.round(Date.now() * 1000), null, persist, false);

    persist.progressListener = dl.QueryInterface(Components.interfaces.nsIWebProgressListener);
    persist.saveURI(dl.source, null, null, 0, null, null, dl.targetFile, null);

    return dl;
  }

  var db = dm.DBConnection;

  // Empty any old downloads
  db.executeSimpleSQL("DELETE FROM moz_downloads");

  var stmt = db.createStatement(
    "INSERT INTO moz_downloads (source, state, target, referrer) " +
    "VALUES (?1, ?2, ?3, ?4)");

  // add first download: PAUSED state
  try {
    var file = Components.classes["@mozilla.org/file/directory_service;1"]
                         .getService(Components.interfaces.nsIProperties)
                         .get("TmpD", Components.interfaces.nsIFile);
    file.append("dltest-paused");
    var fileSpec = Components.classes["@mozilla.org/network/io-service;1"]
                             .getService(Components.interfaces.nsIIOService)
                             .newFileURI(file).spec;
    stmt.bindByIndex(0, "http://example.com/file");
    stmt.bindByIndex(1, dm.DOWNLOAD_PAUSED);
    stmt.bindByIndex(2, fileSpec);
    stmt.bindByIndex(3, "http://referrer/");

    // Add it!
    stmt.execute();
  }
  finally {
    stmt.reset();
    stmt.finalize();
  }

  // Close the UI if necessary
  var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
                     .getService(Components.interfaces.nsIWindowMediator);
  var win = wm.getMostRecentWindow("Download:Manager");
  if (win) win.close();

  var obs = Components.classes["@mozilla.org/observer-service;1"]
                      .getService(Components.interfaces.nsIObserverService);
  const DLMGR_UI_DONE = "download-manager-ui-done";

  var testObs = {
    observe: function(aSubject, aTopic, aData) {
      if (aTopic != DLMGR_UI_DONE)
        return;

      SimpleTest.waitForFocus(function () { continueTest(aSubject) }, aSubject);
    }
  };

  function continueTest(win) {
      dm.addListener(new dlObs(win));

      // add second download: FINISHED state, actually created
      // (checked by cmd_open)
      addDownload();

      obs.removeObserver(testObs, DLMGR_UI_DONE);
  }

  obs.addObserver(testObs, DLMGR_UI_DONE, false);

  // Show the Download Manager UI
  Components.classes["@mozilla.org/download-manager-ui;1"]
            .getService(Components.interfaces.nsISuiteDownloadManagerUI)
            .showManager();

  SimpleTest.waitForExplicitFinish();
}

  ]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display:none;"></div>
    <pre id="test"></pre>
  </body>
</window>
