<?xml version="1.0"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 *   the Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Shawn Wilsher <me@shawnwilsher.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/**
 * This tests that the space key will pause and resume a download in the UI.
 * This test was added in bug 413985.
 */
-->

<window title="Download Manager Test"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="test();">

  <script type="application/javascript"
          src="chrome://mochikit/content/MochiKit/packed.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"/>

  <script type="application/javascript">
  <![CDATA[

function bug413985obs(aWin)
{
  this.mWin = aWin;
  this.wasPaused = false;
  this.wasResumed = false;
  this.wasFinished = false;
}
bug413985obs.prototype = {
  observe: function(aSubject, aTopic, aData)
  {
    if ("timer-callback" == aTopic) {
      if (this.wasFinished) {
        // We're done!
        var dm = Components.classes["@mozilla.org/download-manager;1"]
                           .getService(Components.interfaces.nsIDownloadManager);
        dm.removeListener(this);
        this.mWin.close();
        SimpleTest.finish();
      } else {
        if (!this.wasPaused)
          this.wasPaused = true;
        else if (!this.wasResumed)
          this.wasResumed = true;

        // dispatch a space keypress to pause/resume the download
        synthesizeKey(" ", {}, this.mWin);
      }
    }
  },

  onDownloadStateChange: function(aState, aDownload)
  {
    ok(true, "State value = " + aDownload.state);
    switch (aDownload.state) {
      case Components.interfaces.nsIDownloadManager.DOWNLOAD_DOWNLOADING:
        if (!this.wasPaused) {
          ok(true, "The download was started successfully");
          // We have to do this on a timer so other JS stuff that handles the UI
          // can actually catch up to us...
          var timer = Components.classes["@mozilla.org/timer;1"]
                                .createInstance(Components.interfaces.nsITimer);
          timer.init(this, 0, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
        } else {
          ok(this.wasResumed, "The download was resumed successfully");
        }
        break;

      case Components.interfaces.nsIDownloadManager.DOWNLOAD_PAUSED:
        ok(this.wasPaused && !this.wasResumed,
           "The download was paused successfully");
        if (!this.wasResumed) {
          // We have to do this on a timer so other JS stuff that handles the UI
          // can actually catch up to us...
          var timer = Components.classes["@mozilla.org/timer;1"]
                                .createInstance(Components.interfaces.nsITimer);
          timer.init(this, 0, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
        }
        break;

      case Components.interfaces.nsIDownloadManager.DOWNLOAD_FINISHED:
        ok(this.wasPaused && this.wasResumed,
           "The download was paused, and then resumed to completion");
        this.wasFinished = true;
        aDownload.targetFile.remove(false);

        // We have to do this on a timer so other JS stuff that handles the UI
        // can actually catch up to us...
        var timer = Components.classes["@mozilla.org/timer;1"]
                              .createInstance(Components.interfaces.nsITimer);
        timer.init(this, 0, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
        break;

      default:
        break;
    }
  },
  onStateChange: function(a, b, c, d, e) { },
  onProgressChange: function(a, b, c, d, e, f, g) { },
  onSecurityChange: function(a, b, c, d) { }
};
function test()
{
  var dm = Components.classes["@mozilla.org/download-manager;1"]
                     .getService(Components.interfaces.nsIDownloadManager);

  function addDownload() {
    function createURI(aObj) {
      var ios = Components.classes["@mozilla.org/network/io-service;1"]
                          .getService(Components.interfaces.nsIIOService);
      return (aObj instanceof Components.interfaces.nsIFile) ? ios.newFileURI(aObj) :
                                            ios.newURI(aObj, null, null);
    }

    const nsIWBP = Components.interfaces.nsIWebBrowserPersist;
    var persist = Components.classes["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
                            .createInstance(nsIWBP);
    persist.persistFlags = nsIWBP.PERSIST_FLAGS_REPLACE_EXISTING_FILES |
                           nsIWBP.PERSIST_FLAGS_BYPASS_CACHE |
                           nsIWBP.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;

    var dirSvc = Components.classes["@mozilla.org/file/directory_service;1"]
                           .getService(Components.interfaces.nsIProperties);
    var destFile = dirSvc.get("ProfD", Components.interfaces.nsIFile);
    destFile.append("download.result");
    if (destFile.exists())
      destFile.remove(false);

    // SeaMonkey: Use a bigger file than "http://example.com/httpd.js". (Bug 595685)
    var dl = dm.addDownload(Components.interfaces.nsIDownloadManager.DOWNLOAD_TYPE_DOWNLOAD,
                            createURI("http://example.com/tests/fonts/mplus/mplus-1p-regular.ttf"),
                            createURI(destFile), null, null,
                            Math.round(Date.now() * 1000), null, persist, false);

    persist.progressListener = dl.QueryInterface(Components.interfaces.nsIWebProgressListener);
    persist.saveURI(dl.source, null, null, 0, null, null, dl.targetFile, null);

    return dl;
  }

  // First, we clear out the database
  dm.DBConnection.executeSimpleSQL("DELETE FROM moz_downloads");

  // See if the DM is already open, and if it is, close it!
  var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
                     .getService(Components.interfaces.nsIWindowMediator);
  var win = wm.getMostRecentWindow("Download:Manager");
  if (win)
    win.close();

  var os = Components.classes["@mozilla.org/observer-service;1"]
                     .getService(Components.interfaces.nsIObserverService);
  const DLMGR_UI_DONE = "download-manager-ui-done";

  var testObs = {
    observe: function(aSubject, aTopic, aData)
    {
      if (aTopic != DLMGR_UI_DONE)
        return;

      SimpleTest.waitForFocus(function () { continueTest(aSubject) }, aSubject);
    }
  };

  function continueTest(win) {
      var doc = win.document;
      dm.addListener(new bug413985obs(win));

      addDownload();
      // we need to focus the download as well
      doc.getElementById("downloadTree").view.selection.select(0);
      os.removeObserver(testObs, DLMGR_UI_DONE);
  }

  // Register with the observer service
  os.addObserver(testObs, DLMGR_UI_DONE, false);

  // Show the Download Manager UI
  Components.classes["@mozilla.org/download-manager-ui;1"]
            .getService(Components.interfaces.nsISuiteDownloadManagerUI)
            .showManager();

  SimpleTest.waitForExplicitFinish();
}

  ]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display:none;"></div>
    <pre id="test"></pre>
  </body>
</window>
