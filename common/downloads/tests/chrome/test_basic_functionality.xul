<?xml version="1.0"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 *   the Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Shawn Wilsher <me@shawnwilsher.com> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/**
 * Make sure the download manager can display downloads in the right order and
 * contains the expected data. The list has one of each download state ordered
 * by the start/end times.
 */
-->

<window title="Download Manager Test"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="test();">

  <script type="application/javascript"
          src="chrome://mochikit/content/MochiKit/packed.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>

  <script type="application/javascript">
  <![CDATA[

var ios = Components.classes["@mozilla.org/network/io-service;1"]
                    .getService(Components.interfaces.nsIIOService);
var dmFile = Components.classes["@mozilla.org/file/directory_service;1"]
                       .getService(Components.interfaces.nsIProperties)
                       .get("TmpD", Components.interfaces.nsIFile);
dmFile.append("dm-ui-test.file");
dmFile.createUnique(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 0666);
var gTestPath = ios.newFileURI(dmFile).spec;

// Downloads are sorted by endTime, so make sure the end times are distinct
const DownloadData = [
  /* Active states first */
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859239,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_NOTSTARTED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859238,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_DOWNLOADING,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859237,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_PAUSED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859236,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_SCANNING,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859235,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_QUEUED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  /* Finished states */
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859234,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_FINISHED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859233,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_FAILED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859232,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_CANCELED,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859231,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_BLOCKED_PARENTAL,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859230,
    endTime: 1180493839859230,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_DIRTY,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 },
  { name: "381603.patch",
    source: "https://bugzilla.mozilla.org/attachment.cgi?id=266520",
    target: gTestPath,
    startTime: 1180493839859229,
    endTime: 1180493839859229,
    state: Components.interfaces.nsIDownloadManager.DOWNLOAD_BLOCKED_POLICY,
    currBytes: 0, maxBytes: -1, preferredAction: 0, autoResume: 0 }
];

function test_numberOfTreeItems(aWin)
{
  var doc = aWin.document;
  var dlTree = doc.getElementById("downloadTree");
  is(dlTree.view.rowCount, DownloadData.length,
     "There is the correct number of tree items");
}

function test_properDownloadData(aWin)
{
  // This also tests the ordering of the display
  var doc = aWin.document;
  var dlTree = doc.getElementById("downloadTree");
  var view = dlTree.view;
  var colName = dlTree.columns.getNamedColumn("Name");
  var colState = dlTree.columns.getNamedColumn("Status");
  var colTarget = dlTree.columns.getNamedColumn("Name");
  var colSource = dlTree.columns.getNamedColumn("Source");
  var stateString;
  var statusBar = doc.getElementById("statusbar-display");
  var ioSvc = Components.classes["@mozilla.org/network/io-service;1"]
                        .getService(Components.interfaces.nsIIOService);

  for (var i = 0; i < view.rowCount; i++) {
    view.selection.select(i);
    is(view.getCellText(i, colName), DownloadData[i].name,
       "Download names match up");
    switch (DownloadData[i].state) {
      case Components.interfaces.nsIDownloadManager.DOWNLOAD_PAUSED:
        stateString = "Paused";
        break;
      case Components.interfaces.nsIDownloadManager.DOWNLOAD_DOWNLOADING:
        stateString = "Downloading";
        break;
      case Components.interfaces.nsIDownloadManager.DOWNLOAD_FINISHED:
        stateString = "Finished";
        break;
      case Components.interfaces.nsIDownloadManager.DOWNLOAD_FAILED:
        stateString = "Failed";
        break;
      case Components.interfaces.nsIDownloadManager.DOWNLOAD_CANCELED:
        stateString = "Canceled";
        break;
      case Components.interfaces.nsIDownloadManager.DOWNLOAD_BLOCKED_PARENTAL: // Parental Controls
      case Components.interfaces.nsIDownloadManager.DOWNLOAD_BLOCKED_POLICY:   // Security Zone Policy
      case Components.interfaces.nsIDownloadManager.DOWNLOAD_DIRTY:            // possible virus/spyware
        stateString = "Blocked";
        break;
      default:
        stateString = "Not Started";
        break;
    }
    is(view.getCellText(i, colState), stateString,
       "Download states match up");

    var filePath = ioSvc.newURI(DownloadData[i].target, null, null)
                        .QueryInterface(Components.interfaces.nsIFileURL)
                        .file.clone()
                        .QueryInterface(Components.interfaces.nsILocalFile)
                        .path;
    is(statusBar.label, filePath,
       "Download targets match up");
    is(view.getCellText(i, colSource), DownloadData[i].source,
       "Download sources match up");
  }
}

var testFuncs = [
    test_numberOfTreeItems
  , test_properDownloadData
];

function test()
{
  var dm = Components.classes["@mozilla.org/download-manager;1"]
                     .getService(Components.interfaces.nsIDownloadManager);
  var db = dm.DBConnection;

  // First, we populate the database with some fake data
  db.executeSimpleSQL("DELETE FROM moz_downloads");
  var stmt = db.createStatement(
    "INSERT INTO moz_downloads (name, source, target, startTime, endTime, " +
      "state, currBytes, maxBytes, preferredAction, autoResume) " +
    "VALUES (:name, :source, :target, :startTime, :endTime, :state, " +
      ":currBytes, :maxBytes, :preferredAction, :autoResume)");
  for each (var dl in DownloadData) {
    for (var prop in dl)
      stmt.params[prop] = dl[prop];

    stmt.execute();
  }
  stmt.finalize();

  // See if the DM is already open, and if it is, close it!
  var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
                     .getService(Components.interfaces.nsIWindowMediator);
  var win = wm.getMostRecentWindow("Download:Manager");
  if (win)
    win.close();

  var os = Components.classes["@mozilla.org/observer-service;1"]
                     .getService(Components.interfaces.nsIObserverService);
  const DLMGR_UI_DONE = "download-manager-ui-done";

  var testObs = {
    observe: function(aSubject, aTopic, aData)
    {
      if (aTopic != DLMGR_UI_DONE)
        return;

      var win = aSubject;

      // Now we can run our tests
      for each (let t in testFuncs)
        t(win);

      win.close();
      dmFile.remove(false);
      os.removeObserver(testObs, DLMGR_UI_DONE);
      SimpleTest.finish();
    }
  };

  // Register with the observer service
  os.addObserver(testObs, DLMGR_UI_DONE, false);

  // Show the Download Manager UI
  Components.classes["@mozilla.org/download-manager-ui;1"]
            .getService(Components.interfaces.nsISuiteDownloadManagerUI)
            .showManager();

  SimpleTest.waitForExplicitFinish();
}

  ]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display:none;"></div>
    <pre id="test"></pre>
  </body>
</window>
